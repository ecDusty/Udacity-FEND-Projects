


/**
 * GRID & LayoutDefault Styles
 *  Here are the sites default styles for it's grid
 *  and default layout, included flex setup.
 *
 */

 @mixin padd-gutter {
	padding-left: $grid-gutter-width / 2;
	padding-right: $grid-gutter-width / 2;
}

@mixin marg-gutter {
	margin-left: -$grid-gutter-width / 2;
	margin-right: -$grid-gutter-width / 2;
}

.grid {
	display: grid;
	justify-content: stretch;

	&-row-main {
		grid-template-rows: 80px auto auto auto;
		grid-row-gap: 0;

		.header {
			grid-row: 1;
		}

		.main {
			grid-row: 2 / 4;
		}

		.footer {
			grid-row: 4;
		}

		&.grid-aside {
			.main {
				grid-row: 2 / 3
			}
			.aside {
				grid-row: 3 / 4;
			}

			@include media-breakpoint-up('md') {
				.main, .aside {
					grid-row: 2 / 4;
				}
			}
		}
	}

	&-col-main {
		grid-template-columns: 1fr 1fr 1fr;
		grid-column-gap: $grid-gutter-width;
		@include media-breakpoint-up('md') {
			grid-template-columns: 270px 1fr 270px;

		}

		.header, .main, .footer {
			grid-column: 1 / 4;
		}

		&.grid-aside {
			.main, .aside {
				grid-column: 1 / 4;
				@include padd-gutter();
			}

			@include media-breakpoint-up('md') {
				.main {
					grid-column: 1/3;
					padding-right: 0;
				}

				.aside {
					grid-column: 3 / 4;
					padding-left: 0;
				}
			}
		}
	}
}

.gCol {
	&-6 {
		&-start { grid-column: 1 / 7; }
		&-end { grid-column: 7 / 13; }
	}

	&-12 { grid-column: 1 / 13; }

	&-sm {
	@include media-breakpoint-up('sm') {
		&-6 {
			&-start { grid-column: 1 / 7; }
			&-end { grid-column: 7 / 13; }
		}
	}
	}

	&-md {
		@include media-breakpoint-up('md') {
			&-9 {
				&-start { grid-column: 1 / 10; }
				&-end { grid-column: 4 / 13; }
			}

			&-3 {
				&-start { grid-column: 1 / 4; }
				&-end { grid-column: 10 / 13; }
			}
		}
	}
}

/*!
	Flex Columns Setup
*/
// Col mixin

@each $name, $width in $grid-breakpoints {
	@include media-breakpoint-up('#{$name}') {
		@for $i from 1 through 12 {
			@if $name == 'xs' {
				.col-#{$i} {
					flex: 1 1 #{$i / 12 * 100}#{'%'};
					max-width: #{$i / 12 * 100}#{'%'};
				}
			} @else {
				.col-#{$name}-#{$i} {
					flex: 1 1 #{$i / 12 * 100}#{'%'};
					max-width: #{$i / 12 * 100}#{'%'};
				}
			}
		}

	}
}


/// A Container wrapper for any flex element. This allows the use
// of .flex-row to offset it's sides by the gutter-width/2. Which
// inturn makes it easier to have flexed items evenly spaced (bootstrap trick)
.container-flex {
	@include padd-gutter();
	overflow-wrap: break-word;
}

.flex-row {
	display: flex;
	@include marg-gutter();
	flex-wrap: wrap;

	> * {
		@include padd-gutter();
	}
}

.justify-con {
	&-center {
		justify-content: center;
	}

	&-between {
		justify-content: space-between;
	}
}

.align {
	&-items {
		&-center {
			align-items: center;
		}

		&-stretch {
			align-items: stretch;
		}
	}
}

.w- {
	&100 {
		width: 100%;
		max-width: 100%;
		flex-basis: 100%;
	}
}
// END OF FLEX STYLES
